@startuml
'https://plantuml.com/class-diagram

package interfaces {
    interface IFlying {
        + {abstract} Flying() : string
    }
    
    interface ISwimming {
        + {abstract} Swimming() : string
    }
    
    interface IWalking {
        + {abstract} Walking() : string
    }
}

package animals {
    abstract class Animal {
        + kind : string
        
        # Animal(kind : string)
    }
    
    Animal <|-- Bird
    IFlying <|.. Bird
    IWalking <|.. Bird
    class Bird {
        + Bird(kind : string)
        
        + Flying() : string
        + Walking() : string
    }
    
    Animal <|-- Fish
    ISwimming <|.. Fish
    class Fish {
        + Fish(kind : string)
        
        + Swimming() : string
    }
    
    Animal <|-- Mammalia
    IWalking <|.. Mammalia
    class Mammalia {
        + Mammalia(kind : string)
        
        + Walking() : string
    }
    
    Animal <|-- Insect
    IFlying <|.. Insect
    IWalking <|.. Insect
    class Insect {
        + Insect(kind : string)
        
        + Flying() : string
        + Walking() : string
    }
}

package aviaries {
    Animal <--o Aviary
    abstract class Aviary {
        + name : string
        + totalCount : int
        + animals : Animal[]
        
        # Aviary(name : string, count : int)
        
        + {abstract} AddAnimal(animal : Animal) : bool
        # IsFree() : bool
    }
    
    Aviary <|-- AquaAviary
    Animal <-- AquaAviary
    'ISwimming <.. AquaAviary
    class AquaAviary {
        + AquaAviary(name : string, totalCount : int)
        
        + AddAnimal(animal : Animal) : bool
    }
    
    Aviary <|-- LandAviary
    Animal <-- LandAviary
    'IWalking <.. LandAviary
    class LandAviary {
        + LandAviary(name : string, totalCount : int)
                
        + AddAnimal(animal : Animal) : bool
    }
}

package creators {
    interface ICreator <<T>> {
        + Create() : T
    }
    package animals {
        ICreator <|.. AnimalCreator
        Animal <--o AnimalCreator
        abstract class AnimalCreator
        {
            # kind : string
            
            # AnimalCreator(kind : string)
            
            + {abstract} Create() : Animal
        }
        
        AnimalCreator <|-- BirdCreator
        'Bird <.. BirdCreator
        class BirdCreator {
            + BirdCreator(kind : string)
            
            + Create() : Animal
        }
        
        AnimalCreator <|-- FishCreator
        'Fish <.. FishCreator
        class FishCreator {
            + FishCreator(kind : string)
            
            + Create() : Animal
        }
        
        AnimalCreator <|-- MammaliaCreator
        'Mammalia <.. MammaliaCreator
        class MammaliaCreator {
            + MammaliaCreator(kind : string)
        
            + Create() : Animal
        }
        
        AnimalCreator <|-- InsectCreator
        'Insect <.. InsectCreator
        class InsectCreator {
            + InsectCreator(kind : string)
        
            + Create() : Animal
        }
    }
    
    package aviaries {
        Aviary <--o AviaryCreator
        abstract class AviaryCreator
        {
            # name : string
            # count : int
            
            # AviaryCreator(name : string, count : int)
            
            + {abstract} Create() : Aviary
        }
        
        AviaryCreator <|-- LandAviaryCreator
        'LandAviary <.. LandAviaryCreator
        class LandAviaryCreator
        {
            + LandAviaryCreator(name : string, count : int)
            
            + Create() : Aviary
        }
        
        AviaryCreator <|-- AquaAviaryCreator
        'AquaAviary <.. AquaAviaryCreator
        class AquaAviaryCreator
        {
            + AquaAviaryCreator(name : string, count : int)
            
            + Create() : Aviary
        }
    }
}

enum AnimalType {
    Bird
    Fish
    Insect
    Mammalia
}

enum AviaryType {
    Aqua
    Land
}

Aviary <--o Zoo
Animal <--o Zoo
AnimalType <-- Zoo
AviaryType <-- Zoo
'AviaryCreator <.. Zoo
'AnimalCreator <.. Zoo
class Zoo{
    + totalAviaries : int
    + aviaries : Aviary[]
    + animals : Animal[]
    
    + Zoo()
    
    + AddAnimal(kind : string, animalType : AnimalType, aviary : Aviary) : bool
    + AddAviary(name : string, count : int, aviaryType : AviaryType) : bool
}

@enduml