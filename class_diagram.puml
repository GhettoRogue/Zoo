@startuml
'https://plantuml.com/class-diagram

package models {
    package interfaces {
        interface IFlying {
            + {abstract} Flying() : string
        }
        
        interface ISwimming {
            + {abstract} Swimming() : string
        }
        
        interface IWalking {
            + {abstract} Walking() : string
        }
    }
    
    package animals {
        abstract class Animal {
            + kind : string
        }
        
        Animal <|-- Bird
        IFlying <|.. Bird
        IWalking <|.. Bird
        class Bird {            
            + Flying() : string
            + Walking() : string
        }
        
        Animal <|-- Fish
        ISwimming <|.. Fish
        class Fish {
            + Swimming() : string
        }
        
        Animal <|-- Mammalia
        IWalking <|.. Mammalia
        class Mammalia {
            + Walking() : string
        }
        
        Animal <|-- Insect
        IFlying <|.. Insect
        IWalking <|.. Insect
        class Insect {
            + Flying() : string
            + Walking() : string
        }
    }
    
    package aviaries {
        Animal <--o Aviary
        abstract class Aviary {
            + name : string
            + totalCount : int
            + animals : Animal[]
            
            + {abstract} AddAnimal(animal : Animal) : bool
            + IsFree() : bool
        }
        
        Aviary <|-- AquaAviary
        Animal <-- AquaAviary
        'ISwimming <.. AquaAviary
        class AquaAviary {
            + AddAnimal(animal : Animal) : bool
        }
        
        Aviary <|-- LandAviary
        Animal <-- LandAviary
        'IWalking <.. LandAviary
        class LandAviary {
            + AddAnimal(animal : Animal) : bool
        }
    }
}

package loggers {
    interface ILogger{
        + {abstract} Info(message : string) : void
        + {abstract} Error(message : string) : void
        + {abstract} Success(message : string) : void
    }
    
    ILogger <|.. LogToConsole
    class LogToConsole {
        - Print(message : string, color : ConsoleColor) : void
        + Info(message : string) : void
        + Error(message : string) : void
        + Success(message : string) : void
    }
    
    ILogger <|.. LogToFile
    class LogToFile {
        - path : string
        
        + LogToFile(path : string)
    
        - Write(message : string) : void
        + Info(message : string) : void
        + Error(message : string) : void
        + Success(message : string) : void
    }
}

package creators {
    ILogger <--* ICreator
    interface ICreator <<T>> {
        + Logger : ILogger
        + Create() : T
    }
    package animals {
        ICreator <|.. AnimalCreator
        Animal <--o AnimalCreator
        abstract class AnimalCreator {
            + kind : string
            
            + {abstract} Create() : Animal
        }
        
        AnimalCreator <|-- BirdCreator
        'Bird <.. BirdCreator
        class BirdCreator {
            + BirdCreator(kind : string)
            
            + Create() : Animal
        }
        
        AnimalCreator <|-- FishCreator
        'Fish <.. FishCreator
        class FishCreator {
            + FishCreator(kind : string)
            
            + Create() : Animal
        }
        
        AnimalCreator <|-- MammaliaCreator
        'Mammalia <.. MammaliaCreator
        class MammaliaCreator {
            + MammaliaCreator(kind : string)
        
            + Create() : Animal
        }
        
        AnimalCreator <|-- InsectCreator
        'Insect <.. InsectCreator
        class InsectCreator {
            + InsectCreator(kind : string)
        
            + Create() : Animal
        }
    }
    
    package aviaries {
        ICreator <|.. AviaryCreator
        Aviary <--o AviaryCreator
        abstract class AviaryCreator
        {
            + name : string
            + count : int
            
            + {abstract} Create() : Aviary
        }
        
        AviaryCreator <|-- LandAviaryCreator
        'LandAviary <.. LandAviaryCreator
        class LandAviaryCreator
        {
            + Create() : Aviary
        }
        
        AviaryCreator <|-- AquaAviaryCreator
        'AquaAviary <.. AquaAviaryCreator
        class AquaAviaryCreator
        {
            + Create() : Aviary
        }
    }
}

package zoo {
    enum AnimalType {
        Unknown
        Bird
        Fish
        Insect
        Mammalia
    }

    enum AviaryType {
        Unknown
        Aqua
        Land
    }

    Aviary <--o Zoo
    Animal <--o Zoo
    AnimalType <-- Zoo
    AviaryType <-- Zoo
    'AviaryCreator <.. Zoo
    'AnimalCreator <.. Zoo
    class Zoo{
        + totalAviaries : int
        + aviaries : Aviary[]
        + animals : Animal[]
        
        + AddAnimal(kind : string, animalType : AnimalType, aviary : Aviary) : bool
        + AddAviary(name : string, count : int, aviaryType : AviaryType) : bool
    }
}

@enduml